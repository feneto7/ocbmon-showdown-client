{"version":3,"file":"battle-dex-search.js","names":["isModdedFormatType","formatType","getModdedFormatTableName","moddedFormatType","mod","isNatDex","DexSearch","searchType","arguments","length","undefined","formatid","species","query","dex","Dex","typedSearch","results","exactMatch","firstPokemonColumn","sortCol","reverseSort","filters","setType","_proto","prototype","getTypedSearch","format","speciesOrSet","BattlePokemonSearch","BattleItemSearch","BattleMoveSearch","BattleAbilitySearch","BattleTypeSearch","BattleCategorySearch","find","toID","_this$typedSearch","getResults","textSearch","_this$typedSearch2","addFilter","entry","type","includes","_i2","_this$filters2","filter","push","removeFilter","filterid","join","deleted","i","splice","pop","toggleSort","filterLabel","filterType","illegalLabel","id","_this$typedSearch3","illegalReasons","getTier","_this$typedSearch4","_this$typedSearch5","_this$typedSearch6","searchTypeIndex","typeTable","qFilterType","slice","window","BattleTypeChart","getClosest","BattleSearchIndex","passType","searchPasses","queryAlias","BattleAliases","aliasPassType","unshift","substr","matchLength","matchQuery","bufs","topbufIndex","count","nearMatch","instafilter","instafilterSort","illegal","searchPass","shift","typeIndex","gen","startsWith","matchStart","matchEnd","originalIndex","BattleSearchIndexOffset","charCodeAt","typeName","curBufLength","topbuf","concat","Array","apply","fType","fId","_this$typedSearch7","buf","illegalBuf","charAt","toUpperCase","BattlePokedex","types","get","ability","abilities","name","hasAbility","BattleMovedex","category","left","right","mid","Math","floor","pokemon","tier","move","item","egggroup","article","BattleTypedSearch","set","baseResults","baseIllegalResults","sortRow","Number","forGen","modMatch","match","fullMod","modName","modified","endsWith","_proto2","_this","getDefaultResults","call","getBaseResults","legalityFilter","_i4","_this$baseResults2","_ref","resultType","value","getTable","illegalResults","_i6","_this$baseResults4","result","_i8","_this$baseIllegalResu2","_ref2","rowType","sort","_ref3","firstLearnsetid","speciesid","table","BattleTeambuilderTable","learnsets","exists","baseLearnsetid","baseSpecies","battleOnly","nextLearnsetid","learnsetid","lsetSpecies","next","changesFrom","prevo","canLearn","moveid","moves","isNonstandard","genChar","learnset","num","String","tableKey","overrideTier","_BattleTypedSearch2","_this2","_len","args","_key","_inheritsLoose","_proto3","_this$formatType","_this$formatType2","_this$formatType3","_this$formatType4","isVGCOrBS","isHackmons","isDoublesOrBS","tierSet","tiers","map","r","slices","formatSlices","Uber","Regular","OU","UU","RU","NU","PU","ZU","LC","AG","DUber","DOU","DUU","DNU","NFE","zuBans","_ref4","monotypeBans","_ref5","test","_ref6","row","_i0","_ref7","eggGroups","_this3","sortOrder","_ref8","_ref9","rowType1","id1","rowType2","id2","stat1","baseStats","stat2","_ref0","_ref1","base1","base2","bst1","hp","atk","def","spa","spd","spe","bst2","_ref10","_ref11","name1","name2","Error","_BattleTypedSearch3","_proto4","BattleAbilities","isAAA","abilitySet","isMega","goodAbilities","poorAbilities","badAbilities","_i10","_abilities$sort$map2","abil","rating","_i12","_ref12","_BattleTypedSearch4","_proto5","BattleItems","itemSet","items","speciesName","speciesSpecific","_i14","_this$dex$items$get$i","itemUser","_i16","_ref13","_BattleTypedSearch5","_this4","_len2","_key2","_proto6","moveIsNotUseless","_moveData$flags","_moveData$flags2","_moveData$flags3","abilityid","itemid","weightkg","evos","GOOD_DOUBLES_MOVES","moveData","ALWAYS_GOOD_MOVES","GOOD_STATUS_MOVES","basePower","GOOD_WEAK_MOVES","flags","charge","recharge","slicing","BAD_STRONG_MOVES","isSTABmons","isTradebacks","regionBornLegality","sketchMoves","sketch","lsetTable","_this$formatType5","_BattleTeambuilderTab","_this$formatType6","_BattleTeambuilderTab2","learnsetEntry","minGenCode","nonstandardMoves","noSketch","isMax","isZ","speciesTypes","moveTypes","genDex","prevoSpecies","excludedForme","s","forme","otherFormes","_i18","_baseSpecies$otherFor2","formeName","valid","_i20","usableMoves","uselessMoves","_i22","_moves2","isUsable","_i24","_i26","_ref14","_this5","powerTable","frustration","spitup","trumpcard","naturalgift","grassknot","lowkick","gyroball","electroball","flail","reversal","present","wringout","crushgrip","heatcrash","heavyslam","fling","magnitude","beatup","punishment","psywave","nightshade","seismictoss","dragonrage","sonicboom","superfang","endeavor","sheercold","fissure","horndrill","guillotine","_ref15","_ref16","move1","move2","pow1","pow2","_ref17","_ref18","accuracy1","accuracy","accuracy2","_ref19","_ref20","pp1","pp","pp2","_ref21","_ref22","_BattleTypedSearch6","_proto7","physical","special","status","_BattleTypedSearch7","_proto8"],"sources":["../src/battle-dex-search.ts"],"sourcesContent":["/**\r\n * Search\r\n *\r\n * Code for searching for dex information, used by the Dex and\r\n * Teambuilder.\r\n *\r\n * Dependencies: battledata, search-index\r\n * Optional dependencies: pokedex, moves, items, abilities\r\n *\r\n * @author Guangcong Luo <guangcongluo@gmail.com>\r\n * @license MIT\r\n */\r\n\r\ntype SearchType = (\r\n\t'pokemon' | 'type' | 'tier' | 'move' | 'item' | 'ability' | 'egggroup' | 'category' | 'article'\r\n);\r\n\r\ntype SearchRow = (\r\n\t[SearchType, ID, number?, number?] | ['sortpokemon' | 'sortmove', ''] | ['header' | 'html', string]\r\n);\r\n\r\ntype SearchFilter = [string, string];\r\n\r\ntype ModdedFormatType = { mod: string, isNatDex: boolean };\r\ntype FormatType = 'doubles' | 'bdsp' | 'bdspdoubles' | 'letsgo' | 'metronome' | 'natdex' | 'nfe' |\r\n'ssdlc1' | 'ssdlc1doubles' | 'predlc' | 'predlcdoubles' | 'predlcnatdex' | 'stadium' | 'lc' | ModdedFormatType | null;\r\n\r\nconst isModdedFormatType = (formatType: FormatType): formatType is ModdedFormatType => formatType !== null && typeof formatType !== 'string';\r\nconst getModdedFormatTableName = (moddedFormatType: ModdedFormatType) => `${moddedFormatType.mod}${moddedFormatType.isNatDex ? 'natdex' : 'only'}`;\r\n\r\n/** ID, SearchType, index (if alias), offset (if offset alias) */\r\ndeclare const BattleSearchIndex: [ID, SearchType, number?, number?][];\r\ndeclare const BattleSearchIndexOffset: any;\r\ndeclare const BattleTeambuilderTable: any;\r\n\r\n/**\r\n * Backend for search UIs.\r\n */\r\nclass DexSearch {\r\n\tquery = '';\r\n\r\n\t/**\r\n\t * Dex for the mod/generation to search.\r\n\t */\r\n\tdex: ModdedDex = Dex;\r\n\r\n\ttypedSearch: BattleTypedSearch<SearchType> | null = null;\r\n\r\n\tresults: SearchRow[] | null = null;\r\n\texactMatch = false;\r\n\r\n\tstatic typeTable = {\r\n\t\tpokemon: 1,\r\n\t\ttype: 2,\r\n\t\ttier: 3,\r\n\t\tmove: 4,\r\n\t\titem: 5,\r\n\t\tability: 6,\r\n\t\tegggroup: 7,\r\n\t\tcategory: 8,\r\n\t\tarticle: 9,\r\n\t};\r\n\tstatic typeName = {\r\n\t\tpokemon: 'Pok&eacute;mon',\r\n\t\ttype: 'Type',\r\n\t\ttier: 'Tiers',\r\n\t\tmove: 'Moves',\r\n\t\titem: 'Items',\r\n\t\tability: 'Abilities',\r\n\t\tegggroup: 'Egg group',\r\n\t\tcategory: 'Category',\r\n\t\tarticle: 'Article',\r\n\t};\r\n\tfirstPokemonColumn: 'Tier' | 'Number' = 'Number';\r\n\r\n\t/**\r\n\t * Column to sort by. Default is `null`, a smart sort determined by how good\r\n\t * things are according to the base filters, falling back to dex number (for\r\n\t * Pokemon) and name (for everything else).\r\n\t */\r\n\tsortCol: string | null = null;\r\n\treverseSort = false;\r\n\r\n\t/**\r\n\t * Filters for the search result. Does not include the two base filters\r\n\t * (format and species).\r\n\t */\r\n\tfilters: SearchFilter[] | null = null;\r\n\r\n\tconstructor(searchType: SearchType | '' = '', formatid = '' as ID, species = '' as ID) {\r\n\t\tthis.setType(searchType, formatid, species);\r\n\t}\r\n\r\n\tgetTypedSearch(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\r\n\t\tif (!searchType) return null;\r\n\t\tswitch (searchType) {\r\n\t\tcase 'pokemon': return new BattlePokemonSearch('pokemon', format, speciesOrSet);\r\n\t\tcase 'item': return new BattleItemSearch('item', format, speciesOrSet);\r\n\t\tcase 'move': return new BattleMoveSearch('move', format, speciesOrSet);\r\n\t\tcase 'ability': return new BattleAbilitySearch('ability', format, speciesOrSet);\r\n\t\tcase 'type': return new BattleTypeSearch('type', format, speciesOrSet);\r\n\t\tcase 'category': return new BattleCategorySearch('category', format, speciesOrSet);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfind(query: string) {\r\n\t\tquery = toID(query);\r\n\t\tif (this.query === query && this.results) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.query = query;\r\n\t\tif (!query) {\r\n\t\t\tthis.results = this.typedSearch?.getResults(this.filters, this.sortCol, this.reverseSort) || [];\r\n\t\t} else {\r\n\t\t\tthis.results = this.textSearch(query);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetType(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\r\n\t\t// invalidate caches\r\n\t\tthis.results = null;\r\n\r\n\t\tif (searchType !== this.typedSearch?.searchType) {\r\n\t\t\tthis.filters = null;\r\n\t\t\tthis.sortCol = null;\r\n\t\t}\r\n\t\tthis.typedSearch = this.getTypedSearch(searchType, format, speciesOrSet);\r\n\t\tif (this.typedSearch) this.dex = this.typedSearch.dex;\r\n\t}\r\n\r\n\taddFilter(entry: SearchFilter): boolean {\r\n\t\tif (!this.typedSearch) return false;\r\n\t\tlet [type] = entry;\r\n\t\tif (this.typedSearch.searchType === 'pokemon') {\r\n\t\t\tif (type === this.sortCol) this.sortCol = null;\r\n\t\t\tif (!['type', 'move', 'ability', 'egggroup', 'tier'].includes(type)) return false;\r\n\t\t\tif (type === 'move') entry[1] = toID(entry[1]);\r\n\t\t\tif (!this.filters) this.filters = [];\r\n\t\t\tthis.results = null;\r\n\t\t\tfor (const filter of this.filters) {\r\n\t\t\t\tif (filter[0] === type && filter[1] === entry[1]) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.filters.push(entry);\r\n\t\t\treturn true;\r\n\t\t} else if (this.typedSearch.searchType === 'move') {\r\n\t\t\tif (type === this.sortCol) this.sortCol = null;\r\n\t\t\tif (!['type', 'category', 'pokemon'].includes(type)) return false;\r\n\t\t\tif (type === 'pokemon') entry[1] = toID(entry[1]);\r\n\t\t\tif (!this.filters) this.filters = [];\r\n\t\t\tthis.filters.push(entry);\r\n\t\t\tthis.results = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tremoveFilter(entry?: SearchFilter): boolean {\r\n\t\tif (!this.filters) return false;\r\n\t\tif (entry) {\r\n\t\t\tconst filterid = entry.join(':');\r\n\t\t\tlet deleted: string[] | null = null;\r\n\t\t\t// delete specific filter\r\n\t\t\tfor (let i = 0; i < this.filters.length; i++) {\r\n\t\t\t\tif (filterid === this.filters[i].join(':')) {\r\n\t\t\t\t\tdeleted = this.filters[i];\r\n\t\t\t\t\tthis.filters.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!deleted) return false;\r\n\t\t} else {\r\n\t\t\tthis.filters.pop();\r\n\t\t}\r\n\t\tif (!this.filters.length) this.filters = null;\r\n\t\tthis.results = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\ttoggleSort(sortCol: string) {\r\n\t\tif (this.sortCol === sortCol) {\r\n\t\t\tif (!this.reverseSort) {\r\n\t\t\t\tthis.reverseSort = true;\r\n\t\t\t} else {\r\n\t\t\t\tthis.sortCol = null;\r\n\t\t\t\tthis.reverseSort = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.sortCol = sortCol;\r\n\t\t\tthis.reverseSort = false;\r\n\t\t}\r\n\t\tthis.results = null;\r\n\t}\r\n\r\n\tfilterLabel(filterType: string) {\r\n\t\tif (this.typedSearch && this.typedSearch.searchType !== filterType) {\r\n\t\t\treturn 'Filter';\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tillegalLabel(id: ID) {\r\n\t\treturn this.typedSearch?.illegalReasons?.[id] || null;\r\n\t}\r\n\r\n\tgetTier(species: Species) {\r\n\t\treturn this.typedSearch?.getTier(species) || '';\r\n\t}\r\n\r\n\ttextSearch(query: string): SearchRow[] {\r\n\t\tquery = toID(query);\r\n\r\n\t\tthis.exactMatch = false;\r\n\t\tlet searchType: SearchType | '' = this.typedSearch?.searchType || '';\r\n\r\n\t\t// If searchType exists, we're searching mainly for results of that type.\r\n\t\t// We'll still search for results of other types, but those results\r\n\t\t// will only be used to filter results for that type.\r\n\t\tlet searchTypeIndex = (searchType ? DexSearch.typeTable[searchType] : -1);\r\n\r\n\t\t/** searching for \"Psychic type\" will make the type come up over the move */\r\n\t\tlet qFilterType: 'type' | '' = '';\r\n\t\tif (query.slice(-4) === 'type') {\r\n\t\t\tif (query.slice(0, -4) in window.BattleTypeChart) {\r\n\t\t\t\tquery = query.slice(0, -4);\r\n\t\t\t\tqFilterType = 'type';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// i represents the location of the search index we're looking at\r\n\t\tlet i = DexSearch.getClosest(query);\r\n\t\tthis.exactMatch = (BattleSearchIndex[i][0] === query);\r\n\r\n\t\t// Even with output buffer buckets, we make multiple passes through\r\n\t\t// the search index. searchPasses is a queue of which pass we're on:\r\n\t\t// [passType, i, query]\r\n\r\n\t\t// By doing an alias pass after the normal pass, we ensure that\r\n\t\t// mid-word matches only display after start matches.\r\n\t\tlet passType: SearchPassType | '' = '';\r\n\t\t/**\r\n\t\t * pass types:\r\n\t\t * * '': time to pop the next pass off the searchPasses queue\r\n\t\t * * 'normal': start at i and stop when results no longer start with query\r\n\t\t * * 'alias': like normal, but output aliases instead of non-alias results\r\n\t\t * * 'fuzzy': start at i and stop when you have two results\r\n\t\t * * 'exact': like normal, but stop at i\r\n\t\t */\r\n\t\ttype SearchPassType = 'normal' | 'alias' | 'fuzzy' | 'exact';\r\n\t\t/**\r\n\t\t * [passType, i, query]\r\n\t\t *\r\n\t\t * i = index of BattleSearchIndex to start from\r\n\t\t *\r\n\t\t * By doing an alias pass after the normal pass, we ensure that\r\n\t\t * mid-word matches only display after start matches.\r\n\t\t */\r\n\t\ttype SearchPass = [SearchPassType, number, string];\r\n\t\tlet searchPasses: SearchPass[] = [['normal', i, query]];\r\n\r\n\t\t// For performance reasons, only do an alias pass if query is at\r\n\t\t// least 2 chars long\r\n\t\tif (query.length > 1) searchPasses.push(['alias', i, query]);\r\n\r\n\t\t// If the query matches an official alias in BattleAliases: These are\r\n\t\t// different from the aliases in the search index and are given\r\n\t\t// higher priority. We'll do a normal pass through the index with\r\n\t\t// the alias text before any other passes.\r\n\t\tlet queryAlias;\r\n\t\tif (query in BattleAliases) {\r\n\t\t\tif (['sub', 'tr'].includes(query) || toID(BattleAliases[query]).slice(0, query.length) !== query) {\r\n\t\t\t\tqueryAlias = toID(BattleAliases[query]);\r\n\t\t\t\tlet aliasPassType: SearchPassType = (queryAlias === 'hiddenpower' ? 'exact' : 'normal');\r\n\t\t\t\tsearchPasses.unshift([aliasPassType, DexSearch.getClosest(queryAlias), queryAlias]);\r\n\t\t\t}\r\n\t\t\tthis.exactMatch = true;\r\n\t\t}\r\n\r\n\t\t// If there are no matches starting with query: Do a fuzzy match pass\r\n\t\t// Fuzzy matches will still be shown after alias matches\r\n\t\tif (!this.exactMatch && BattleSearchIndex[i][0].substr(0, query.length) !== query) {\r\n\t\t\t// No results start with this. Do a fuzzy match pass.\r\n\t\t\tlet matchLength = query.length - 1;\r\n\t\t\tif (!i) i++;\r\n\t\t\twhile (matchLength &&\r\n\t\t\t\tBattleSearchIndex[i][0].substr(0, matchLength) !== query.substr(0, matchLength) &&\r\n\t\t\t\tBattleSearchIndex[i - 1][0].substr(0, matchLength) !== query.substr(0, matchLength)) {\r\n\t\t\t\tmatchLength--;\r\n\t\t\t}\r\n\t\t\tlet matchQuery = query.substr(0, matchLength);\r\n\t\t\twhile (i >= 1 && BattleSearchIndex[i - 1][0].substr(0, matchLength) === matchQuery) i--;\r\n\t\t\tsearchPasses.push(['fuzzy', i, '']);\r\n\t\t}\r\n\r\n\t\t// We split the output buffers into 8 buckets.\r\n\t\t// Bucket 0 is usually unused, and buckets 1-7 represent\r\n\t\t// pokemon, types, moves, etc (see typeTable).\r\n\r\n\t\t// When we're done, the buffers are concatenated together to form\r\n\t\t// our results, with each buffer getting its own header, unlike\r\n\t\t// multiple-pass results, which have no header.\r\n\r\n\t\t// Notes:\r\n\t\t// - if we have a searchType, that searchType's buffer will be on top\r\n\t\tlet bufs: SearchRow[][] = [[], [], [], [], [], [], [], [], [], []];\r\n\t\tlet topbufIndex = -1;\r\n\r\n\t\tlet count = 0;\r\n\t\tlet nearMatch = false;\r\n\r\n\t\t/** [type, id, typeIndex] */\r\n\t\tlet instafilter: [SearchType, ID, number] | null = null;\r\n\t\tlet instafilterSort = [0, 1, 2, 5, 4, 3, 6, 7, 8];\r\n\t\tlet illegal = this.typedSearch?.illegalReasons;\r\n\r\n\t\t// We aren't actually looping through the entirety of the searchIndex\r\n\t\tfor (i = 0; i < BattleSearchIndex.length; i++) {\r\n\t\t\tif (!passType) {\r\n\t\t\t\tlet searchPass = searchPasses.shift();\r\n\t\t\t\tif (!searchPass) break;\r\n\t\t\t\tpassType = searchPass[0];\r\n\t\t\t\ti = searchPass[1];\r\n\t\t\t\tquery = searchPass[2];\r\n\t\t\t}\r\n\r\n\t\t\tlet entry = BattleSearchIndex[i];\r\n\t\t\tlet id = entry[0];\r\n\t\t\tlet type = entry[1];\r\n\r\n\t\t\tif (!id) break;\r\n\r\n\t\t\tif (passType === 'fuzzy') {\r\n\t\t\t\t// fuzzy match pass; stop after 2 results\r\n\t\t\t\tif (count >= 2) {\r\n\t\t\t\t\tpassType = '';\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tnearMatch = true;\r\n\t\t\t} else if (passType === 'exact') {\r\n\t\t\t\t// exact pass; stop after 1 result\r\n\t\t\t\tif (count >= 1) {\r\n\t\t\t\t\tpassType = '';\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t} else if (id.substr(0, query.length) !== query) {\r\n\t\t\t\t// regular pass, time to move onto our next match\r\n\t\t\t\tpassType = '';\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (entry.length > 2) {\r\n\t\t\t\t// alias entry\r\n\t\t\t\tif (passType !== 'alias') continue;\r\n\t\t\t} else {\r\n\t\t\t\t// normal entry\r\n\t\t\t\tif (passType === 'alias') continue;\r\n\t\t\t}\r\n\r\n\t\t\tlet typeIndex = DexSearch.typeTable[type];\r\n\r\n\t\t\t// For performance, with a query length of 1, we only fill the first bucket\r\n\t\t\tif (query.length === 1 && typeIndex !== (searchType ? searchTypeIndex : 1)) continue;\r\n\r\n\t\t\t// For pokemon queries, accept types/tier/abilities/moves/eggroups as filters\r\n\t\t\tif (searchType === 'pokemon' && (typeIndex === 5 || typeIndex > 7)) continue;\r\n\t\t\tif (searchType === 'pokemon' && typeIndex === 3 && this.dex.gen < 9) continue;\r\n\t\t\t// For move queries, accept types/categories as filters\r\n\t\t\tif (searchType === 'move' && ((typeIndex !== 8 && typeIndex > 4) || typeIndex === 3)) continue;\r\n\t\t\t// For move queries in the teambuilder, don't accept pokemon as filters\r\n\t\t\tif (searchType === 'move' && illegal && typeIndex === 1) continue;\r\n\t\t\t// For ability/item queries, don't accept anything else as a filter\r\n\t\t\tif ((searchType === 'ability' || searchType === 'item') && typeIndex !== searchTypeIndex) continue;\r\n\t\t\t// Query was a type name followed 'type'; only show types\r\n\t\t\tif (qFilterType === 'type' && typeIndex !== 2) continue;\r\n\t\t\t// hardcode cases of duplicate non-consecutive aliases\r\n\t\t\tif ((id === 'megax' || id === 'megay') && 'mega'.startsWith(query)) continue;\r\n\r\n\t\t\tlet matchStart = 0;\r\n\t\t\tlet matchEnd = 0;\r\n\t\t\tif (passType === 'alias') {\r\n\t\t\t\t// alias entry\r\n\t\t\t\t// [aliasid, type, originalid, matchStart, originalindex]\r\n\t\t\t\tmatchStart = entry[3]!;\r\n\t\t\t\tlet originalIndex = entry[2]!;\r\n\t\t\t\tif (matchStart) {\r\n\t\t\t\t\tmatchEnd = matchStart + query.length;\r\n\t\t\t\t\tmatchStart += (BattleSearchIndexOffset[originalIndex][matchStart] || '0').charCodeAt(0) - 48;\r\n\t\t\t\t\tmatchEnd += (BattleSearchIndexOffset[originalIndex][matchEnd - 1] || '0').charCodeAt(0) - 48;\r\n\t\t\t\t}\r\n\t\t\t\tid = BattleSearchIndex[originalIndex][0];\r\n\t\t\t} else {\r\n\t\t\t\tmatchEnd = query.length;\r\n\t\t\t\tif (matchEnd) matchEnd += (BattleSearchIndexOffset[i][matchEnd - 1] || '0').charCodeAt(0) - 48;\r\n\t\t\t}\r\n\r\n\t\t\t// some aliases are substrings\r\n\t\t\tif (queryAlias === id && query !== id) continue;\r\n\r\n\t\t\tif (searchType && searchTypeIndex !== typeIndex) {\r\n\t\t\t\t// This is a filter, set it as an instafilter candidate\r\n\t\t\t\tif (!instafilter || instafilterSort[typeIndex] < instafilterSort[instafilter[2]]) {\r\n\t\t\t\t\tinstafilter = [type, id, typeIndex];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// show types above Arceus formes\r\n\t\t\tif (topbufIndex < 0 && searchTypeIndex < 2 && passType === 'alias' && !bufs[1].length && bufs[2].length) {\r\n\t\t\t\ttopbufIndex = 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (illegal && typeIndex === searchTypeIndex) {\r\n\t\t\t\t// Always show illegal results under legal results.\r\n\t\t\t\t// This is done by putting legal results (and the type header)\r\n\t\t\t\t// in bucket 0, and illegal results in the searchType's bucket.\r\n\t\t\t\t// searchType buckets are always on top (but under bucket 0), so\r\n\t\t\t\t// illegal results will be seamlessly right under legal results.\r\n\t\t\t\tif (!bufs[typeIndex].length && !bufs[0].length) {\r\n\t\t\t\t\tbufs[0] = [['header', DexSearch.typeName[type]]];\r\n\t\t\t\t}\r\n\t\t\t\tif (!(id in illegal)) typeIndex = 0;\r\n\t\t\t} else {\r\n\t\t\t\tif (!bufs[typeIndex].length) {\r\n\t\t\t\t\tbufs[typeIndex] = [['header', DexSearch.typeName[type]]];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// don't match duplicate aliases\r\n\t\t\tlet curBufLength = (passType === 'alias' && bufs[typeIndex].length);\r\n\t\t\tif (curBufLength && bufs[typeIndex][curBufLength - 1][1] === id) continue;\r\n\r\n\t\t\tbufs[typeIndex].push([type, id, matchStart, matchEnd]);\r\n\r\n\t\t\tcount++;\r\n\t\t}\r\n\r\n\t\tlet topbuf: SearchRow[] = [];\r\n\t\tif (nearMatch) {\r\n\t\t\ttopbuf = [['html', `<em>No exact match found. The closest matches alphabetically are:</em>`]];\r\n\t\t}\r\n\t\tif (topbufIndex >= 0) {\r\n\t\t\ttopbuf = topbuf.concat(bufs[topbufIndex]);\r\n\t\t\tbufs[topbufIndex] = [];\r\n\t\t}\r\n\t\tif (searchTypeIndex >= 0) {\r\n\t\t\ttopbuf = topbuf.concat(bufs[0]);\r\n\t\t\ttopbuf = topbuf.concat(bufs[searchTypeIndex]);\r\n\t\t\tbufs[searchTypeIndex] = [];\r\n\t\t\tbufs[0] = [];\r\n\t\t}\r\n\r\n\t\tif (instafilter && count < 20) {\r\n\t\t\t// Result count is less than 20, so we can instafilter\r\n\t\t\tbufs.push(this.instafilter(searchType, instafilter[0], instafilter[1]));\r\n\t\t}\r\n\r\n\t\tthis.results = Array.prototype.concat.apply(topbuf, bufs);\r\n\t\treturn this.results;\r\n\t}\r\n\tprivate instafilter(searchType: SearchType | '', fType: SearchType, fId: ID): SearchRow[] {\r\n\t\tlet buf: SearchRow[] = [];\r\n\t\tlet illegalBuf: SearchRow[] = [];\r\n\t\tlet illegal = this.typedSearch?.illegalReasons;\r\n\t\tif (searchType === 'pokemon') {\r\n\t\t\tswitch (fType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1) as TypeName;\r\n\t\t\t\tbuf.push(['header', `${type}-type Pok&eacute;mon`]);\r\n\t\t\t\tfor (let id in BattlePokedex) {\r\n\t\t\t\t\tif (!BattlePokedex[id].types) continue;\r\n\t\t\t\t\tif (this.dex.species.get(id).types.includes(type)) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ability':\r\n\t\t\t\tlet ability = this.dex.abilities.get(fId).name;\r\n\t\t\t\tbuf.push(['header', `${ability} Pok&eacute;mon`]);\r\n\t\t\t\tfor (let id in BattlePokedex) {\r\n\t\t\t\t\tif (!BattlePokedex[id].abilities) continue;\r\n\t\t\t\t\tif (Dex.hasAbility(this.dex.species.get(id), ability)) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else if (searchType === 'move') {\r\n\t\t\tswitch (fType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1);\r\n\t\t\t\tbuf.push(['header', `${type}-type moves`]);\r\n\t\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\t\tif (BattleMovedex[id].type === type) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'category':\r\n\t\t\t\tlet category = fId.charAt(0).toUpperCase() + fId.slice(1);\r\n\t\t\t\tbuf.push(['header', `${category} moves`]);\r\n\t\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\t\tif (BattleMovedex[id].category === category) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [...buf, ...illegalBuf];\r\n\t}\r\n\r\n\tstatic getClosest(query: string) {\r\n\t\t// binary search through the index!\r\n\t\tlet left = 0;\r\n\t\tlet right = BattleSearchIndex.length - 1;\r\n\t\twhile (right > left) {\r\n\t\t\tlet mid = Math.floor((right - left) / 2 + left);\r\n\t\t\tif (BattleSearchIndex[mid][0] === query && (mid === 0 || BattleSearchIndex[mid - 1][0] !== query)) {\r\n\t\t\t\t// that's us\r\n\t\t\t\treturn mid;\r\n\t\t\t} else if (BattleSearchIndex[mid][0] < query) {\r\n\t\t\t\tleft = mid + 1;\r\n\t\t\t} else {\r\n\t\t\t\tright = mid - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (left >= BattleSearchIndex.length - 1) left = BattleSearchIndex.length - 1;\r\n\t\telse if (BattleSearchIndex[left + 1][0] && BattleSearchIndex[left][0] < query) left++;\r\n\t\tif (left && BattleSearchIndex[left - 1][0] === query) left--;\r\n\t\treturn left;\r\n\t}\r\n}\r\n\r\nabstract class BattleTypedSearch<T extends SearchType> {\r\n\tsearchType: T;\r\n\t/**\r\n\t * Dex for the mod/generation to search.\r\n\t */\r\n\tdex: ModdedDex = Dex;\r\n\t/**\r\n\t * Format is the first of two base filters. It constrains results to things\r\n\t * legal in the format, and affects the default sort.\r\n\t *\r\n\t * This string specifically normalizes out generation number and the words\r\n\t * \"Doubles\" and \"Let's Go\" from the name.\r\n\t */\r\n\tformat = '' as ID;\r\n\t/**\r\n\t * `species` is the second of two base filters. It constrains results to\r\n\t * things that species can use, and affects the default sort.\r\n\t */\r\n\tspecies = '' as ID;\r\n\t/**\r\n\t * `set` is a pseudo-base filter; it has minor effects on move sorting.\r\n\t * (Abilities/items can affect what moves are sorted as usable.)\r\n\t */\r\n\tset: PokemonSet | null = null;\r\n\r\n\tprotected formatType: FormatType = null;\r\n\r\n\t/**\r\n\t * Cached copy of what the results list would be with only base filters\r\n\t * (i.e. with an empty `query` and `filters`)\r\n\t */\r\n\tbaseResults: SearchRow[] | null = null;\r\n\t/**\r\n\t * Cached copy of all results not in `baseResults` - mostly in case a user\r\n\t * is wondering why a specific result isn't showing up.\r\n\t */\r\n\tbaseIllegalResults: SearchRow[] | null = null;\r\n\tillegalReasons: {[id: string]: string} | null = null;\r\n\tresults: SearchRow[] | null = null;\r\n\r\n\tprotected readonly sortRow: SearchRow | null = null;\r\n\r\n\tconstructor(searchType: T, format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\r\n\t\tthis.searchType = searchType;\r\n\r\n\t\tthis.baseResults = null;\r\n\t\tthis.baseIllegalResults = null;\r\n\r\n\t\tlet gen = 8\r\n\r\n\t\tif (format.slice(0, 3) === 'gen') {\r\n\t\t\tgen = (Number(format.charAt(3)) || 6);\r\n\t\t\tformat = (format.slice(4) || 'customgame') as ID;\r\n\t\t\tthis.dex = Dex.forGen(gen);\r\n\t\t} else if (!format) {\r\n\t\t\tthis.dex = Dex;\r\n\t\t}\r\n\r\n\t\tif (format.startsWith('dlc1')) {\r\n\t\t\tif (format.includes('doubles')) {\r\n\t\t\t\tthis.formatType = 'ssdlc1doubles';\r\n\t\t\t} else {\r\n\t\t\t\tthis.formatType = 'ssdlc1';\r\n\t\t\t}\r\n\t\t\tformat = format.slice(4) as ID;\r\n\t\t}\r\n\t\tif (format.startsWith('predlc')) {\r\n\t\t\tif (format.includes('doubles') && !format.includes('nationaldex')) {\r\n\t\t\t\tthis.formatType = 'predlcdoubles';\r\n\t\t\t} else if (format.includes('nationaldex')) {\r\n\t\t\t\tthis.formatType = 'predlcnatdex';\r\n\t\t\t} else {\r\n\t\t\t\tthis.formatType = 'predlc';\r\n\t\t\t}\r\n\t\t\tformat = format.slice(6) as ID;\r\n\t\t}\r\n\t\tif (format.startsWith('stadium')) {\r\n\t\t\tthis.formatType = 'stadium';\r\n\t\t\tformat = format.slice(7) as ID;\r\n\t\t\tif (!format) format = 'ou' as ID;\r\n\t\t}\r\n\t\tif (format.startsWith('vgc')) this.formatType = 'doubles';\r\n\t\tif (format === 'vgc2020') this.formatType = 'ssdlc1doubles';\r\n\t\tif (format === 'vgc2023regulationd') this.formatType = 'predlcdoubles';\r\n\t\tif (format.includes('bdsp')) {\r\n\t\t\tif (format.includes('doubles')) {\r\n\t\t\t\tthis.formatType = 'bdspdoubles';\r\n\t\t\t} else {\r\n\t\t\t\tthis.formatType = 'bdsp';\r\n\t\t\t}\r\n\t\t\tformat = format.slice(4) as ID;\r\n\t\t\tthis.dex = Dex.mod(8, 'gen8bdsp' as ID);\r\n\t\t}\r\n\t\tif (format === 'partnersincrime') this.formatType = 'doubles';\r\n\t\tif (format.startsWith('ffa') || format === 'freeforall') this.formatType = 'doubles';\r\n\t\tif (format.includes('letsgo')) {\r\n\t\t\tthis.formatType = 'letsgo';\r\n\t\t\tthis.dex = Dex.mod(7, 'gen7letsgo' as ID);\r\n\t\t}\r\n\t\tif (format.includes('doubles') && this.dex.gen > 4 && !this.formatType) this.formatType = 'doubles';\r\n\t\tif (this.formatType === 'letsgo') format = format.slice(6) as ID;\r\n\t\tif (format.includes('metronome')) {\r\n\t\t\tthis.formatType = 'metronome';\r\n\t\t}\r\n\t\t\r\n\t\tconst modMatch = format.match(/^([a-z]+)(only|nationaldex)/);\r\n\t\tif (modMatch) {\r\n\t\t\tconst [fullMod, modName, modified] = modMatch;\r\n\t\t\tformat = format.slice(fullMod.length) as ID;\r\n\t\t\tthis.formatType = { mod: modName, isNatDex: modified === 'nationaldex' };\r\n\t\t\tthis.dex = Dex.mod(gen, getModdedFormatTableName(this.formatType) as ID);\r\n\t\t} else if (format.includes('nationaldex')) {\r\n\t\t\tformat = format.slice(11) as ID;\r\n\t\t\tthis.formatType = 'natdex';\r\n\t\t\tif (!format) format = 'ou' as ID;\r\n\t\t} else if (format.endsWith('nfe')) {\r\n\t\t\tformat = format.slice(3) as ID;\r\n\t\t\tthis.formatType = 'nfe';\r\n\t\t\tif (!format) format = 'ou' as ID;\r\n\t\t}\r\n\t\tif ((format.endsWith('lc') || format.startsWith('lc')) && format !== 'caplc' && !this.formatType) {\r\n\t\t\tthis.formatType = 'lc';\r\n\t\t\tformat = 'lc' as ID;\r\n\t\t}\r\n\t\tif (format.endsWith('draft')) format = format.slice(0, -5) as ID;\r\n\t\tthis.format = format;\r\n\r\n\t\tthis.species = '' as ID;\r\n\t\tthis.set = null;\r\n\t\tif (typeof speciesOrSet === 'string') {\r\n\t\t\tif (speciesOrSet) this.species = speciesOrSet;\r\n\t\t} else {\r\n\t\t\tthis.set = speciesOrSet as PokemonSet;\r\n\t\t\tthis.species = toID(this.set.species);\r\n\t\t}\r\n\t\tif (!searchType || !this.set) return;\r\n\t}\r\n\tgetResults(filters?: SearchFilter[] | null, sortCol?: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tif (sortCol === 'type') {\r\n\t\t\treturn [this.sortRow!, ...BattleTypeSearch.prototype.getDefaultResults.call(this)];\r\n\t\t} else if (sortCol === 'category') {\r\n\t\t\treturn [this.sortRow!, ...BattleCategorySearch.prototype.getDefaultResults.call(this)];\r\n\t\t} else if (sortCol === 'ability') {\r\n\t\t\treturn [this.sortRow!, ...BattleAbilitySearch.prototype.getDefaultResults.call(this)];\r\n\t\t}\r\n\r\n\t\tif (!this.baseResults) {\r\n\t\t\tthis.baseResults = this.getBaseResults();\r\n\t\t}\r\n\r\n\t\tif (!this.baseIllegalResults) {\r\n\t\t\tconst legalityFilter: {[id: string]: 1} = {};\r\n\t\t\tfor (const [resultType, value] of this.baseResults) {\r\n\t\t\t\tif (resultType === this.searchType) legalityFilter[value] = 1;\r\n\t\t\t}\r\n\t\t\tthis.baseIllegalResults = [];\r\n\t\t\tthis.illegalReasons = {};\r\n\r\n\t\t\tfor (const id in this.getTable()) {\r\n\t\t\t\tif (!(id in legalityFilter)) {\r\n\t\t\t\t\tthis.baseIllegalResults.push([this.searchType, id as ID]);\r\n\t\t\t\t\tthis.illegalReasons[id] = 'Illegal';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet results: SearchRow[];\r\n\t\tlet illegalResults: SearchRow[] | null;\r\n\r\n\t\tif (filters) {\r\n\t\t\tresults = [];\r\n\t\t\tillegalResults = [];\r\n\t\t\tfor (const result of this.baseResults) {\r\n\t\t\t\tif (this.filter(result, filters)) {\r\n\t\t\t\t\tif (results.length && result[0] === 'header' && results[results.length - 1][0] === 'header') {\r\n\t\t\t\t\t\tresults[results.length - 1] = result;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresults.push(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (results.length && results[results.length - 1][0] === 'header') {\r\n\t\t\t\tresults.pop();\r\n\t\t\t}\r\n\t\t\tfor (const result of this.baseIllegalResults) {\r\n\t\t\t\tif (this.filter(result, filters)) {\r\n\t\t\t\t\tillegalResults.push(result);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tresults = [...this.baseResults];\r\n\t\t\tillegalResults = null;\r\n\t\t}\r\n\r\n\t\tif (sortCol) {\r\n\t\t\tresults = results.filter(([rowType]) => rowType === this.searchType);\r\n\t\t\tresults = this.sort(results, sortCol, reverseSort);\r\n\t\t\tif (illegalResults) {\r\n\t\t\t\tillegalResults = illegalResults.filter(([rowType]) => rowType === this.searchType);\r\n\t\t\t\tillegalResults = this.sort(illegalResults, sortCol, reverseSort);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.sortRow) {\r\n\t\t\tresults = [this.sortRow, ...results];\r\n\t\t}\r\n\t\tif (illegalResults && illegalResults.length) {\r\n\t\t\tresults = [...results, ['header', \"Illegal results\"], ...illegalResults];\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tprotected firstLearnsetid(speciesid: ID) {\r\n\t\tlet table = BattleTeambuilderTable;\r\n\t\tif (this.formatType === 'bdsp' || this.formatType === 'bdspdoubles') table = table['gen8bdsp'];\r\n\t\tif (this.formatType === 'letsgo') table = table['gen7letsgo'];\r\n\t\tif (isModdedFormatType(this.formatType)) table = table[getModdedFormatTableName(this.formatType)];\r\n\t\tif ((speciesid in table.learnsets) || (speciesid in BattleTeambuilderTable.learnsets)) return speciesid;\r\n\t\tconst species = this.dex.species.get(speciesid);\r\n\t\tif (!species.exists) return '' as ID;\r\n\r\n\t\tlet baseLearnsetid = toID(species.baseSpecies);\r\n\t\tif (typeof species.battleOnly === 'string' && species.battleOnly !== species.baseSpecies) {\r\n\t\t\tbaseLearnsetid = toID(species.battleOnly);\r\n\t\t}\r\n\t\tif ((baseLearnsetid in table.learnsets) || (baseLearnsetid in BattleTeambuilderTable.learnsets)) return baseLearnsetid;\r\n\t\treturn '' as ID;\r\n\t}\r\n\tprotected nextLearnsetid(learnsetid: ID, speciesid: ID) {\r\n\t\tif (learnsetid === 'lycanrocdusk' || (speciesid === 'rockruff' && learnsetid === 'rockruff')) {\r\n\t\t\treturn 'rockruffdusk' as ID;\r\n\t\t}\r\n\t\tconst lsetSpecies = this.dex.species.get(learnsetid);\r\n\t\tif (!lsetSpecies.exists) return '' as ID;\r\n\r\n\t\tif (lsetSpecies.id === 'gastrodoneast') return 'gastrodon' as ID;\r\n\t\tif (lsetSpecies.id === 'pumpkaboosuper') return 'pumpkaboo' as ID;\r\n\t\tif (lsetSpecies.id === 'sinisteaantique') return 'sinistea' as ID;\r\n\t\tif (lsetSpecies.id === 'tatsugiristretchy') return 'tatsugiri' as ID;\r\n\r\n\t\tconst next = lsetSpecies.battleOnly || lsetSpecies.changesFrom || lsetSpecies.prevo;\r\n\t\tif (next) return toID(next);\r\n\r\n\t\treturn '' as ID;\r\n\t}\r\n\tprotected canLearn(speciesid: ID, moveid: ID) {\r\n\t\tconst move = this.dex.moves.get(moveid);\r\n\t\tif (this.dex.gen >= 8 && this.dex.moves.get(moveid).isNonstandard === 'Past' && (this.formatType !== 'natdex' || (isModdedFormatType(this.formatType) && !this.formatType.isNatDex))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tconst gen = this.dex.gen;\r\n\t\tlet genChar = `${gen}`;\r\n\t\tif (\r\n\t\t\tthis.format.startsWith('vgc') ||\r\n\t\t\tthis.format.startsWith('battlespot') ||\r\n\t\t\tthis.format.startsWith('battlestadium') ||\r\n\t\t\tthis.format.startsWith('battlefestival') ||\r\n\t\t\t(this.dex.gen === 9 && this.formatType !== 'natdex')\r\n\t\t) {\r\n\t\t\tif (gen === 9) {\r\n\t\t\t\tgenChar = 'a';\r\n\t\t\t} else if (gen === 8) {\r\n\t\t\t\tgenChar = 'g';\r\n\t\t\t} else if (gen === 7) {\r\n\t\t\t\tgenChar = 'q';\r\n\t\t\t} else if (gen === 6) {\r\n\t\t\t\tgenChar = 'p';\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet learnsetid = this.firstLearnsetid(speciesid);\r\n\t\twhile (learnsetid) {\r\n\t\t\tlet table = BattleTeambuilderTable;\r\n\t\t\tif (this.formatType === 'bdsp' || this.formatType === 'bdspdoubles') table = table['gen8bdsp'];\r\n\t\t\tif (this.formatType === 'letsgo') table = table['gen7letsgo'];\r\n\t\t\tif (isModdedFormatType(this.formatType)) table = table[getModdedFormatTableName(this.formatType)];\r\n\t\t\tlet learnset = table.learnsets[learnsetid] || BattleTeambuilderTable.learnsets[learnsetid];\r\n\t\t\tif (learnset && (moveid in learnset) && (!this.format.startsWith('tradebacks') ? learnset[moveid].includes(genChar) :\r\n\t\t\t\tlearnset[moveid].includes(genChar) ||\r\n\t\t\t\t\t(learnset[moveid].includes(`${gen + 1}`) && move.gen === gen))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, speciesid);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tgetTier(pokemon: Species) {\r\n\t\tif (this.formatType === 'metronome') {\r\n\t\t\treturn pokemon.num >= 0 ? String(pokemon.num) : pokemon.tier;\r\n\t\t}\r\n\t\tlet table = window.BattleTeambuilderTable;\r\n\t\tconst gen = this.dex.gen;\r\n\t\tconst tableKey = this.formatType === 'doubles' ? `gen${gen}doubles` :\r\n\t\t\tthis.formatType === 'letsgo' ? 'gen7letsgo' :\r\n\t\t\tthis.formatType === 'bdsp' ? 'gen8bdsp' :\r\n\t\t\tthis.formatType === 'bdspdoubles' ? 'gen8bdspdoubles' :\r\n\t\t\tthis.formatType === 'nfe' ? `gen${gen}nfe` :\r\n\t\t\tthis.formatType === 'lc' ? `gen${gen}lc` :\r\n\t\t\tthis.formatType === 'ssdlc1' ? 'gen8dlc1' :\r\n\t\t\tthis.formatType === 'ssdlc1doubles' ? 'gen8dlc1doubles' :\r\n\t\t\tthis.formatType === 'predlc' ? 'gen9predlc' :\r\n\t\t\tthis.formatType === 'predlcdoubles' ? 'gen9predlcdoubles' :\r\n\t\t\tthis.formatType === 'predlcnatdex' ? 'gen9predlcnatdex' :\r\n\t\t\tthis.formatType === 'natdex' ? `gen${gen}natdex` :\r\n\t\t\tthis.formatType === 'stadium' ? `gen${gen}stadium${gen > 1 ? gen : ''}` :\r\n\t\t\tisModdedFormatType(this.formatType) ? getModdedFormatTableName(this.formatType) :\r\n\t\t\t`gen${gen}`;\r\n\r\n\t\tif (table && table[tableKey]) {\r\n\t\t\ttable = table[tableKey];\r\n\t\t}\r\n\t\tif (!table) return pokemon.tier;\r\n\r\n\t\tlet id = pokemon.id;\r\n\t\tif (id in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id];\r\n\t\t}\r\n\t\tif (id.slice(-5) === 'totem' && id.slice(0, -5) in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id.slice(0, -5)];\r\n\t\t}\r\n\t\tid = toID(pokemon.baseSpecies);\r\n\t\tif (id in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id];\r\n\t\t}\r\n\r\n\t\treturn pokemon.tier;\r\n\t}\r\n\tabstract getTable(): {[id: string]: any};\r\n\tabstract getDefaultResults(): SearchRow[];\r\n\tabstract getBaseResults(): SearchRow[];\r\n\tabstract filter(input: SearchRow, filters: string[][]): boolean;\r\n\tabstract sort(input: SearchRow[], sortCol: string, reverseSort?: boolean): SearchRow[];\r\n}\r\n\r\nclass BattlePokemonSearch extends BattleTypedSearch<'pokemon'> {\r\n\tsortRow: SearchRow = ['sortpokemon', ''];\r\n\tgetTable() {\r\n\t\treturn BattlePokedex;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet results: SearchRow[] = [];\r\n\t\tfor (let id in BattlePokedex) {\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'bulbasaur':\r\n\t\t\t\tresults.push(['header', \"Generation 1\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chikorita':\r\n\t\t\t\tresults.push(['header', \"Generation 2\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'treecko':\r\n\t\t\t\tresults.push(['header', \"Generation 3\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'turtwig':\r\n\t\t\t\tresults.push(['header', \"Generation 4\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'victini':\r\n\t\t\t\tresults.push(['header', \"Generation 5\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chespin':\r\n\t\t\t\tresults.push(['header', \"Generation 6\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'rowlet':\r\n\t\t\t\tresults.push(['header', \"Generation 7\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'grookey':\r\n\t\t\t\tresults.push(['header', \"Generation 8\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'sprigatito':\r\n\t\t\t\tresults.push(['header', \"Generation 9\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'missingno':\r\n\t\t\t\tresults.push(['header', \"Glitch\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'syclar':\r\n\t\t\t\tresults.push(['header', \"CAP\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'pikachucosplay':\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tresults.push(['pokemon', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults(): SearchRow[] {\r\n\t\tconst format = this.format;\r\n\t\tif (!format) return this.getDefaultResults();\r\n\t\tconst isVGCOrBS = format.startsWith('battlespot') || format.startsWith('battlestadium') || format.startsWith('vgc');\r\n\t\tconst isHackmons = format.includes('hackmons') || format.endsWith('bh');\r\n\t\tlet isDoublesOrBS = isVGCOrBS || (!isModdedFormatType(this.formatType) && this.formatType?.includes('doubles'));\r\n\t\tconst dex = this.dex;\r\n\r\n\t\tlet table = BattleTeambuilderTable;\r\n\t\tif (dex.gen < 8 && !this.formatType) {\r\n\t\t\ttable = table['gen' + dex.gen];\r\n\t\t} else if (isModdedFormatType(this.formatType)) {\r\n\t\t\ttable = table[`${this.formatType.mod}${this.formatType.isNatDex ? 'natdex' : 'only'}`];\r\n\t\t} else if (format.endsWith('cap') || format.endsWith('caplc')) {\r\n\t\t\t// CAP formats always use the singles table\r\n\t\t\tif (dex.gen < 8) {\r\n\t\t\t\ttable = table['gen' + dex.gen];\r\n\t\t\t}\r\n\t\t} else if (dex.gen === 7 && isVGCOrBS) {\r\n\t\t\ttable = table['gen' + dex.gen + 'vgc'];\r\n\t\t} else if (dex.gen === 9 && isHackmons && !this.formatType) {\r\n\t\t\ttable = table['bh'];\r\n\t\t} else if (\r\n\t\t\ttable['gen' + dex.gen + 'doubles'] && dex.gen > 4 &&\r\n\t\t\tthis.formatType !== 'letsgo' && this.formatType !== 'bdspdoubles' &&\r\n\t\t\tthis.formatType !== 'ssdlc1doubles' && this.formatType !== 'predlcdoubles' &&\r\n\t\t\t(\r\n\t\t\t\tformat.includes('doubles') || format.includes('triples') ||\r\n\t\t\t\tformat === 'freeforall' || format.startsWith('ffa') ||\r\n\t\t\t\tformat === 'partnersincrime'\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\ttable = table['gen' + dex.gen + 'doubles'];\r\n\t\t\tisDoublesOrBS = true;\r\n\t\t} else if (dex.gen < 9 && !this.formatType) {\r\n\t\t\ttable = table['gen' + dex.gen];\r\n\t\t} else if (this.formatType?.startsWith('bdsp')) {\r\n\t\t\ttable = table['gen8' + this.formatType];\r\n\t\t} else if (this.formatType === 'letsgo') {\r\n\t\t\ttable = table['gen7letsgo'];\r\n\t\t} else if (this.formatType === 'natdex') {\r\n\t\t\ttable = table['gen' + dex.gen + 'natdex'];\r\n\t\t} else if (this.formatType === 'metronome') {\r\n\t\t\ttable = table['gen' + dex.gen + 'metronome'];\r\n\t\t} else if (this.formatType === 'nfe') {\r\n\t\t\ttable = table['gen' + dex.gen + 'nfe'];\r\n\t\t} else if (this.formatType === 'lc') {\r\n\t\t\ttable = table['gen' + dex.gen + 'lc'];\r\n\t\t} else if (this.formatType?.startsWith('dlc1')) {\r\n\t\t\tif (this.formatType.includes('doubles')) {\r\n\t\t\t\ttable = table['gen8dlc1doubles'];\r\n\t\t\t} else {\r\n\t\t\t\ttable = table['gen8dlc1'];\r\n\t\t\t}\r\n\t\t} else if (this.formatType?.startsWith('predlc')) {\r\n\t\t\tif (this.formatType.includes('doubles')) {\r\n\t\t\t\ttable = table['gen9predlcdoubles'];\r\n\t\t\t} else if (this.formatType.includes('natdex')) {\r\n\t\t\t\ttable = table['gen9predlcnatdex'];\r\n\t\t\t} else {\r\n\t\t\t\ttable = table['gen9predlc'];\r\n\t\t\t}\r\n\t\t} else if (this.formatType === 'stadium') {\r\n\t\t\ttable = table['gen' + dex.gen + 'stadium' + (dex.gen > 1 ? dex.gen : '')];\r\n\t\t}\r\n\r\n\t\tif (!table.tierSet) {\r\n\t\t\ttable.tierSet = table.tiers.map((r: any) => {\r\n\t\t\t\tif (typeof r === 'string') return ['pokemon', r];\r\n\t\t\t\treturn [r[0], r[1]];\r\n\t\t\t});\r\n\t\t\ttable.tiers = null;\r\n\t\t}\r\n\t\tlet tierSet: SearchRow[] = table.tierSet;\r\n\t\tlet slices: {[k: string]: number} = table.formatSlices;\r\n\t\tif (format === 'ubers' || format === 'uber') tierSet = tierSet.slice(slices.Uber);\r\n\t\telse if (isVGCOrBS || (isHackmons && dex.gen === 9 && !this.formatType)) {\r\n\t\t\tif (format.endsWith('series13') || isHackmons) {\r\n\t\t\t\t// Show Mythicals\r\n\t\t\t} else if (\r\n\t\t\t\tformat === 'vgc2010' || format === 'vgc2016' || format.startsWith('vgc2019') ||\r\n\t\t\t\tformat === 'vgc2022' || format.endsWith('series10') || format.endsWith('series11')\r\n\t\t\t) {\r\n\t\t\t\ttierSet = tierSet.slice(slices[\"Restricted Legendary\"]);\r\n\t\t\t} else {\r\n\t\t\t\ttierSet = tierSet.slice(slices.Regular);\r\n\t\t\t}\r\n\t\t} else if (format === 'ou') tierSet = tierSet.slice(slices.OU);\r\n\t\telse if (format === 'uu') tierSet = tierSet.slice(slices.UU);\r\n\t\telse if (format === 'ru') tierSet = tierSet.slice(slices.RU || slices.UU);\r\n\t\telse if (format === 'nu') tierSet = tierSet.slice(slices.NU || slices.RU || slices.UU);\r\n\t\telse if (format === 'pu') tierSet = tierSet.slice(slices.PU || slices.NU);\r\n\t\telse if (format === 'zu') tierSet = tierSet.slice(slices.ZU || slices.PU || slices.NU);\r\n\t\telse if (format === 'lc' || format === 'lcuu' || format.startsWith('lc') || (format !== 'caplc' && format.endsWith('lc'))) tierSet = tierSet.slice(slices.LC);\r\n\t\telse if (format === 'cap' || format.endsWith('cap')) tierSet = tierSet.slice(0, slices.Uber).concat(tierSet.slice(slices.OU));\r\n\t\telse if (format === 'caplc' || format.endsWith('caplc')) tierSet = tierSet.slice(slices['CAP LC'], slices.Uber).concat(tierSet.slice(slices.LC));\r\n\t\telse if (format === 'anythinggoes' || format.endsWith('ag') || format.startsWith('ag')) {\r\n\t\t\ttierSet = tierSet.slice(slices.AG);\r\n\t\t} else if (isHackmons && (dex.gen < 9 || this.formatType === 'natdex')) {\r\n\t\t\ttierSet = tierSet.slice(slices.AG || slices.Uber);\r\n\t\t} else if (format === 'monotype' || format.startsWith('monothreat')) tierSet = tierSet.slice(slices.Uber);\r\n\t\telse if (format === 'doublesubers') tierSet = tierSet.slice(slices.DUber);\r\n\t\telse if (format === 'doublesou' && dex.gen > 4) tierSet = tierSet.slice(slices.DOU);\r\n\t\telse if (format === 'doublesuu') tierSet = tierSet.slice(slices.DUU);\r\n\t\telse if (format === 'doublesnu') tierSet = tierSet.slice(slices.DNU || slices.DUU);\r\n\t\telse if (format === 'nfe') tierSet = tierSet.slice(slices.NFE);\r\n\t\telse if (this.formatType === 'bdsp' || this.formatType ==='bdspdoubles' || this.formatType === 'letsgo' || this.formatType === 'stadium') {\r\n\t\t\ttierSet = tierSet.slice(slices.Uber);\r\n\t\t} else if (!isDoublesOrBS) {\r\n\t\t\ttierSet = [\r\n\t\t\t\t...tierSet.slice(slices.OU, slices.UU),\r\n\t\t\t\t...tierSet.slice(slices.AG, slices.Uber),\r\n\t\t\t\t...tierSet.slice(slices.Uber, slices.OU),\r\n\t\t\t\t...tierSet.slice(slices.UU),\r\n\t\t\t];\r\n\t\t} else {\r\n\t\t\ttierSet = [\r\n\t\t\t\t...tierSet.slice(slices.DOU, slices.DUU),\r\n\t\t\t\t...tierSet.slice(slices.DUber, slices.DOU),\r\n\t\t\t\t...tierSet.slice(slices.DUU),\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\tif (dex.gen >= 5) {\r\n\t\t\tif (format === 'zu' && table.zuBans) {\r\n\t\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\t\tif (id in table.zuBans) return false;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif ((format === 'monotype' || format.startsWith('monothreat')) && table.monotypeBans) {\r\n\t\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\t\tif (id in table.monotypeBans) return false;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Filter out Gmax Pokemon from standard tier selection\r\n\t\tif (!/^(battlestadium|vgc|doublesubers)/g.test(format)) {\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\tif (type === 'header' && id === 'DUber by technicality') return false;\r\n\t\t\t\tif (type === 'pokemon') return !id.endsWith('gmax');\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn tierSet;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'pokemon') return true;\r\n\t\tconst species = this.dex.species.get(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tif (species.types[0] !== value && species.types[1] !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'egggroup':\r\n\t\t\t\tif (species.eggGroups[0] !== value && species.eggGroups[1] !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'tier':\r\n\t\t\t\tif (this.getTier(species) !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ability':\r\n\t\t\t\tif (!Dex.hasAbility(species, value)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'move':\r\n\t\t\t\tif (!this.canLearn(species.id, value as ID)) return false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string, reverseSort?: boolean) {\r\n\t\tconst sortOrder = reverseSort ? -1 : 1;\r\n\t\tif (['hp', 'atk', 'def', 'spa', 'spd', 'spe'].includes(sortCol)) {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst stat1 = this.dex.species.get(id1).baseStats[sortCol as StatName];\r\n\t\t\t\tconst stat2 = this.dex.species.get(id2).baseStats[sortCol as StatName];\r\n\t\t\t\treturn (stat2 - stat1) * sortOrder;\r\n\t\t\t});\r\n\t\t} else if (sortCol === 'bst') {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst base1 = this.dex.species.get(id1).baseStats;\r\n\t\t\t\tconst base2 = this.dex.species.get(id2).baseStats;\r\n\t\t\t\tconst bst1 = base1.hp + base1.atk + base1.def + base1.spa + base1.spd + base1.spe;\r\n\t\t\t\tconst bst2 = base2.hp + base2.atk + base2.def + base2.spa + base2.spd + base2.spe;\r\n\t\t\t\treturn (bst2 - bst1) * sortOrder;\r\n\t\t\t});\r\n\t\t} else if (sortCol === 'name') {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst name1 = id1;\r\n\t\t\t\tconst name2 = id2;\r\n\t\t\t\treturn (name1 < name2 ? -1 : name1 > name2 ? 1 : 0) * sortOrder;\r\n\t\t\t});\r\n\t\t}\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleAbilitySearch extends BattleTypedSearch<'ability'> {\r\n\tgetTable() {\r\n\t\treturn BattleAbilities;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tconst results: SearchRow[] = [];\r\n\t\tfor (let id in BattleAbilities) {\r\n\t\t\tresults.push(['ability', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults() {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst format = this.format;\r\n\t\tconst isHackmons = (format.includes('hackmons') || format.endsWith('bh'));\r\n\t\tconst isAAA = (format === 'almostanyability' || format.includes('aaa'));\r\n\t\tconst dex = this.dex;\r\n\t\tlet species = dex.species.get(this.species);\r\n\t\tlet abilitySet: SearchRow[] = [['header', \"Abilities\"]];\r\n\r\n\t\tif (species.isMega) {\r\n\t\t\tabilitySet.unshift(['html', `Will be <strong>${species.abilities['0']}</strong> after Mega Evolving.`]);\r\n\t\t\tspecies = dex.species.get(species.baseSpecies);\r\n\t\t}\r\n\t\tabilitySet.push(['ability', toID(species.abilities['0'])]);\r\n\t\tif (species.abilities['1']) {\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['1'])]);\r\n\t\t}\r\n\t\tif (species.abilities['H']) {\r\n\t\t\tabilitySet.push(['header', \"Hidden Ability\"]);\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['H'])]);\r\n\t\t}\r\n\t\tif (species.abilities['S']) {\r\n\t\t\tabilitySet.push(['header', \"Special Event Ability\"]);\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['S'])]);\r\n\t\t}\r\n\t\tif (isAAA || format.includes('metronomebattle') || isHackmons) {\r\n\t\t\tlet abilities: ID[] = [];\r\n\t\t\tfor (let i in this.getTable()) {\r\n\t\t\t\tconst ability = dex.abilities.get(i);\r\n\t\t\t\tif (ability.isNonstandard) continue;\r\n\t\t\t\tif (ability.gen > dex.gen) continue;\r\n\t\t\t\tabilities.push(ability.id);\r\n\t\t\t}\r\n\r\n\t\t\tlet goodAbilities: SearchRow[] = [['header', \"Abilities\"]];\r\n\t\t\tlet poorAbilities: SearchRow[] = [['header', \"Situational Abilities\"]];\r\n\t\t\tlet badAbilities: SearchRow[] = [['header', \"Unviable Abilities\"]];\r\n\t\t\tfor (const ability of abilities.sort().map(abil => dex.abilities.get(abil))) {\r\n\t\t\t\tlet rating = ability.rating;\r\n\t\t\t\tif (ability.id === 'normalize') rating = 3;\r\n\t\t\t\tif (rating >= 3) {\r\n\t\t\t\t\tgoodAbilities.push(['ability', ability.id]);\r\n\t\t\t\t} else if (rating >= 2) {\r\n\t\t\t\t\tpoorAbilities.push(['ability', ability.id]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbadAbilities.push(['ability', ability.id]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tabilitySet = [...goodAbilities, ...poorAbilities, ...badAbilities];\r\n\t\t\tif (species.isMega) {\r\n\t\t\t\tif (isAAA) {\r\n\t\t\t\t\tabilitySet.unshift(['html', `Will be <strong>${species.abilities['0']}</strong> after Mega Evolving.`]);\r\n\t\t\t\t}\r\n\t\t\t\t// species is unused after this, so no need to replace\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn abilitySet;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'ability') return true;\r\n\t\tconst ability = this.dex.abilities.get(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!Dex.hasAbility(this.dex.species.get(value), ability.name)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleItemSearch extends BattleTypedSearch<'item'> {\r\n\tgetTable() {\r\n\t\treturn BattleItems;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet table = BattleTeambuilderTable;\r\n\t\tif (this.formatType === 'bdsp' || this.formatType === 'bdspdoubles') {\r\n\t\t\ttable = table['gen8bdsp'];\r\n\t\t} else if (this.formatType === 'natdex') {\r\n\t\t\ttable = table['gen' + this.dex.gen + 'natdex'];\r\n\t\t} else if (this.formatType === 'metronome') {\r\n\t\t\ttable = table['gen' + this.dex.gen + 'metronome'];\r\n\t\t} else if (isModdedFormatType(this.formatType)) {\r\n\t\t\ttable = table[getModdedFormatTableName(this.formatType)];\r\n\t\t} else if (this.dex.gen < 9) {\r\n\t\t\ttable = table['gen' + this.dex.gen];\r\n\t\t}\r\n\t\tif (!table.itemSet) {\r\n\t\t\ttable.itemSet = table.items.map((r: any) => {\r\n\t\t\t\tif (typeof r === 'string') {\r\n\t\t\t\t\treturn ['item', r];\r\n\t\t\t\t}\r\n\t\t\t\treturn [r[0], r[1]];\r\n\t\t\t});\r\n\t\t\ttable.items = null;\r\n\t\t}\r\n\t\treturn table.itemSet;\r\n\t}\r\n\tgetBaseResults(): SearchRow[] {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst speciesName = this.dex.species.get(this.species).name;\r\n\t\tconst results = this.getDefaultResults();\r\n\t\tconst speciesSpecific: SearchRow[] = [];\r\n\t\tfor (const row of results) {\r\n\t\t\tif (row[0] !== 'item') continue;\r\n\t\t\tif (this.dex.items.get(row[1]).itemUser?.includes(speciesName)) {\r\n\t\t\t\tspeciesSpecific.push(row);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (speciesSpecific.length) {\r\n\t\t\treturn [\r\n\t\t\t\t['header', \"Specific to \" + speciesName],\r\n\t\t\t\t...speciesSpecific,\r\n\t\t\t\t...results,\r\n\t\t\t];\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'ability') return true;\r\n\t\tconst ability = this.dex.abilities.get(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!Dex.hasAbility(this.dex.species.get(value), ability.name)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleMoveSearch extends BattleTypedSearch<'move'> {\r\n\tsortRow: SearchRow = ['sortmove', ''];\r\n\tgetTable() {\r\n\t\treturn BattleMovedex;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet results: SearchRow[] = [];\r\n\t\tresults.push(['header', \"Moves\"]);\r\n\t\tfor (let id in BattleMovedex) {\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'paleowave':\r\n\t\t\t\tresults.push(['header', \"CAP moves\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'magikarpsrevenge':\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tresults.push(['move', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tprivate moveIsNotUseless(id: ID, species: Species, moves: string[], set: PokemonSet | null) {\r\n\t\tconst dex = this.dex;\r\n\r\n\t\tlet abilityid: ID = set ? toID(set.ability) : '' as ID;\r\n\t\tconst itemid: ID = set ? toID(set.item) : '' as ID;\r\n\r\n\t\tif (dex.gen === 1) {\r\n\t\t\t// Usually not useless for Gen 1\r\n\t\t\tif ([\r\n\t\t\t\t'acidarmor', 'amnesia', 'barrier', 'bind', 'blizzard', 'clamp', 'confuseray', 'counter', 'firespin', 'growth', 'headbutt', 'hyperbeam', 'mirrormove', 'pinmissile', 'razorleaf', 'sing', 'slash', 'sludge', 'twineedle', 'wrap',\r\n\t\t\t].includes(id)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Usually useless for Gen 1\r\n\t\t\tif ([\r\n\t\t\t\t'disable', 'haze', 'leechseed', 'quickattack', 'roar', 'thunder', 'toxic', 'triattack', 'waterfall', 'whirlwind',\r\n\t\t\t].includes(id)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Not useless only when certain moves aren't present\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'bubblebeam': return (!moves.includes('surf') && !moves.includes('blizzard'));\r\n\t\t\tcase 'doubleedge': return !moves.includes('bodyslam');\r\n\t\t\tcase 'doublekick': return !moves.includes('submission');\r\n\t\t\tcase 'firepunch': return !moves.includes('fireblast');\r\n\t\t\tcase 'megadrain': return !moves.includes('razorleaf') && !moves.includes('surf');\r\n\t\t\tcase 'megakick': return !moves.includes('hyperbeam');\r\n\t\t\tcase 'reflect': return !moves.includes('barrier') && !moves.includes('acidarmor');\r\n\t\t\tcase 'stomp': return !moves.includes('headbutt');\r\n\t\t\tcase 'submission': return !moves.includes('highjumpkick');\r\n\t\t\tcase 'thunderpunch': return !moves.includes('thunderbolt');\r\n\t\t\tcase 'triattack': return !moves.includes('bodyslam');\r\n\t\t\t}\r\n\t\t\t// Useful and Useless moves for Stadium OU, which changes many game mechanics.\r\n\t\t\tif (this.formatType === 'stadium') {\r\n\t\t\t\tif (['doubleedge', 'focusenergy', 'haze'].includes(id)) return true;\r\n\t\t\t\tif (['hyperbeam', 'sing', 'hypnosis'].includes(id)) return false;\r\n\t\t\t\tswitch (id) {\r\n\t\t\t\tcase 'fly': return !moves.includes('drillpeck');\r\n\t\t\t\tcase 'dig': return !moves.includes('earthquake');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'letsgo') {\r\n\t\t\tif (['megadrain', 'teleport'].includes(id)) return true;\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'metronome') {\r\n\t\t\tif (id === 'metronome') return true;\r\n\t\t}\r\n\r\n\t\tif (itemid === 'pidgeotite') abilityid = 'noguard' as ID;\r\n\t\tif (itemid === 'blastoisinite') abilityid = 'megalauncher' as ID;\r\n\t\tif (itemid === 'aerodactylite') abilityid = 'toughclaws' as ID;\r\n\t\tif (itemid === 'glalitite') abilityid = 'refrigerate' as ID;\r\n\r\n\t\tswitch (id) {\r\n\t\tcase 'fakeout': case 'flamecharge': case 'nuzzle': case 'poweruppunch':\r\n\t\t\treturn abilityid !== 'sheerforce';\r\n\t\tcase 'solarbeam': case 'solarblade':\r\n\t\t\treturn ['desolateland', 'drought', 'chlorophyll', 'orichalcumpulse'].includes(abilityid) || itemid === 'powerherb';\r\n\t\tcase 'dynamicpunch': case 'grasswhistle': case 'inferno': case 'sing': case 'zapcannon':\r\n\t\t\treturn abilityid === 'noguard';\r\n\t\tcase 'heatcrash': case 'heavyslam':\r\n\t\t\treturn species.weightkg >= (species.evos ? 75 : 130);\r\n\r\n\t\tcase 'aerialace':\r\n\t\t\treturn ['technician', 'toughclaws'].includes(abilityid) && !moves.includes('bravebird');\r\n\t\tcase 'ancientpower':\r\n\t\t\treturn ['serenegrace', 'technician'].includes(abilityid) || !moves.includes('powergem');\r\n\t\tcase 'aquajet':\r\n\t\t\treturn !moves.includes('jetpunch');\r\n\t\tcase 'aurawheel':\r\n\t\t\treturn species.baseSpecies === 'Morpeko';\r\n\t\tcase 'axekick':\r\n\t\t\treturn !moves.includes('highjumpkick');\r\n\t\tcase 'bellydrum':\r\n\t\t\treturn moves.includes('aquajet') || moves.includes('jetpunch') || moves.includes('extremespeed') ||\r\n\t\t\t\t['iceface', 'unburden'].includes(abilityid);\r\n\t\tcase 'bulletseed':\r\n\t\t\treturn ['skilllink', 'technician'].includes(abilityid);\r\n\t\tcase 'chillingwater':\r\n\t\t\treturn !moves.includes('scald');\r\n\t\tcase 'counter':\r\n\t\t\treturn species.baseStats.hp >= 65;\r\n\t\tcase 'darkvoid':\r\n\t\t\treturn dex.gen < 7;\r\n\t\tcase 'dualwingbeat':\r\n\t\t\treturn abilityid === 'technician' || !moves.includes('drillpeck');\r\n\t\tcase 'feint':\r\n\t\t\treturn abilityid === 'refrigerate';\r\n\t\tcase 'grassyglide':\r\n\t\t\treturn abilityid === 'grassysurge';\r\n\t\tcase 'gyroball':\r\n\t\t\treturn species.baseStats.spe <= 60;\r\n\t\tcase 'headbutt':\r\n\t\t\treturn abilityid === 'serenegrace';\r\n\t\tcase 'hex':\r\n\t\t\treturn !moves.includes('infernalparade');\r\n\t\tcase 'hiddenpowerelectric':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('thunderpunch')) && !moves.includes('thunderbolt');\r\n\t\tcase 'hiddenpowerfighting':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('brickbreak')) && !moves.includes('aurasphere') && !moves.includes('focusblast');\r\n\t\tcase 'hiddenpowerfire':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('firepunch')) && !moves.includes('flamethrower') &&\r\n\t\t\t\t!moves.includes('mysticalfire') && !moves.includes('burningjealousy');\r\n\t\tcase 'hiddenpowergrass':\r\n\t\t\treturn !moves.includes('energyball') && !moves.includes('grassknot') && !moves.includes('gigadrain');\r\n\t\tcase 'hiddenpowerice':\r\n\t\t\treturn !moves.includes('icebeam') && (dex.gen < 4 && !moves.includes('icepunch')) ||\r\n\t\t\t\t(dex.gen > 5 && !moves.includes('aurorabeam') && !moves.includes('glaciate'));\r\n\t\tcase 'hiddenpowerflying':\r\n\t\t\treturn dex.gen < 4 && !moves.includes('drillpeck');\r\n\t\tcase 'hiddenpowerbug':\r\n\t\t\treturn dex.gen < 4 && !moves.includes('megahorn');\r\n\t\tcase 'hiddenpowerpsychic':\r\n\t\t\treturn species.baseSpecies === 'Unown';\r\n\t\tcase 'hyperspacefury':\r\n\t\t\treturn species.id === 'hoopaunbound';\r\n\t\tcase 'hypnosis':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('sleeppowder')) || (dex.gen > 6 && abilityid === 'baddreams');\r\n\t\tcase 'icepunch':\r\n\t\t\treturn !moves.includes('icespinner') || ['sheerforce', 'ironfist'].includes(abilityid) || itemid === 'punchingglove';\r\n\t\tcase 'iciclecrash':\r\n\t\t\treturn !moves.includes('mountaingale');\r\n\t\tcase 'icywind':\r\n\t\t\t// Keldeo needs Hidden Power for Electric/Ghost\r\n\t\t\treturn species.baseSpecies === 'Keldeo' || this.formatType === 'doubles';\r\n\t\tcase 'infestation':\r\n\t\t\treturn moves.includes('stickyweb');\r\n\t\tcase 'irondefense':\r\n\t\t\treturn !moves.includes('acidarmor');\r\n\t\tcase 'irontail':\r\n\t\t\treturn dex.gen > 5 && !moves.includes('ironhead') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\r\n\t\tcase 'jumpkick':\r\n\t\t\treturn !moves.includes('highjumpkick') && !moves.includes('axekick');\r\n\t\tcase 'lastresort':\r\n\t\t\treturn set && set.moves.length < 3;\r\n\t\tcase 'leechlife':\r\n\t\t\treturn dex.gen > 6;\r\n\t\tcase 'mysticalfire':\r\n\t\t\treturn dex.gen > 6 && !moves.includes('flamethrower');\r\n\t\tcase 'naturepower':\r\n\t\t\treturn dex.gen === 5;\r\n\t\tcase 'nightslash':\r\n\t\t\treturn !moves.includes('crunch') && !(moves.includes('knockoff') && dex.gen >= 6);\r\n\t\tcase 'outrage':\r\n\t\t\treturn !moves.includes('glaiverush');\r\n\t\tcase 'petaldance':\r\n\t\t\treturn abilityid === 'owntempo';\r\n\t\tcase 'phantomforce':\r\n\t\t\treturn (!moves.includes('poltergeist') && !moves.includes('shadowclaw')) || this.formatType === 'doubles';\r\n\t\tcase 'poisonfang':\r\n\t\t\treturn species.types.includes('Poison') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\r\n\t\tcase 'relicsong':\r\n\t\t\treturn species.id === 'meloetta';\r\n\t\tcase 'refresh':\r\n\t\t\treturn !moves.includes('aromatherapy') && !moves.includes('healbell');\r\n\t\tcase 'risingvoltage':\r\n\t\t\treturn abilityid === 'electricsurge' || abilityid === 'hadronengine';\r\n\t\tcase 'rocktomb':\r\n\t\t\treturn abilityid === 'technician';\r\n\t\tcase 'selfdestruct':\r\n\t\t\treturn dex.gen < 5 && !moves.includes('explosion');\r\n\t\tcase 'shadowpunch':\r\n\t\t\treturn abilityid === 'ironfist' && !moves.includes('ragefist');\r\n\t\tcase 'shelter':\r\n\t\t\treturn !moves.includes('acidarmor') && !moves.includes('irondefense');\r\n\t\tcase 'smackdown':\r\n\t\t\treturn species.types.includes('Ground');\r\n\t\tcase 'smartstrike':\r\n\t\t\treturn species.types.includes('Steel') && !moves.includes('ironhead');\r\n\t\tcase 'soak':\r\n\t\t\treturn abilityid === 'unaware';\r\n\t\tcase 'steelwing':\r\n\t\t\treturn !moves.includes('ironhead');\r\n\t\tcase 'stompingtantrum':\r\n\t\t\treturn (!moves.includes('earthquake') && !moves.includes('drillrun')) || this.formatType === 'doubles';\r\n\t\tcase 'stunspore':\r\n\t\t\treturn !moves.includes('thunderwave');\r\n\t\tcase 'technoblast':\r\n\t\t\treturn dex.gen > 5 && itemid.endsWith('drive') || itemid === 'dousedrive';\r\n\t\tcase 'teleport':\r\n\t\t\treturn dex.gen > 7;\r\n\t\tcase 'terrainpulse': case 'waterpulse':\r\n\t\t\treturn ['megalauncher', 'technician'].includes(abilityid) && !moves.includes('originpulse');\r\n\t\tcase 'toxicspikes':\r\n\t\t\treturn abilityid !== 'toxicdebris';\r\n\t\tcase 'trickroom':\r\n\t\t\treturn species.baseStats.spe <= 100;\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'doubles' && BattleMoveSearch.GOOD_DOUBLES_MOVES.includes(id)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tconst moveData = BattleMovedex[id];\r\n\t\tif (!moveData) return true;\r\n\t\tif (BattleMoveSearch.ALWAYS_GOOD_MOVES.includes(id)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tif (moveData.category === 'Status') {\r\n\t\t\treturn BattleMoveSearch.GOOD_STATUS_MOVES.includes(id);\r\n\t\t}\r\n\t\tif (moveData.basePower < 75) {\r\n\t\t\treturn BattleMoveSearch.GOOD_WEAK_MOVES.includes(id);\r\n\t\t}\r\n\t\tif (id === 'skydrop') return true;\r\n\t\t// strong moves\r\n\t\tif (moveData.flags?.charge) {\r\n\t\t\treturn itemid === 'powerherb';\r\n\t\t}\r\n\t\tif (moveData.flags?.recharge) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (moveData.flags?.slicing && abilityid === 'sharpness') {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn !BattleMoveSearch.BAD_STRONG_MOVES.includes(id);\r\n\t}\r\n\tstatic readonly GOOD_STATUS_MOVES = [\r\n\t\t'acidarmor', 'agility', 'aromatherapy', 'auroraveil', 'autotomize', 'banefulbunker', 'batonpass', 'bellydrum', 'bulkup', 'calmmind', 'chillyreception', 'clangoroussoul', 'coil', 'cottonguard', 'courtchange', 'curse', 'defog', 'destinybond', 'detect', 'disable', 'dragondance', 'encore', 'extremeevoboost', 'filletaway', 'geomancy', 'glare', 'haze', 'healbell', 'healingwish', 'healorder', 'heartswap', 'honeclaws', 'kingsshield', 'leechseed', 'lightscreen', 'lovelykiss', 'lunardance', 'magiccoat', 'maxguard', 'memento', 'milkdrink', 'moonlight', 'morningsun', 'nastyplot', 'naturesmadness', 'noretreat', 'obstruct', 'painsplit', 'partingshot', 'perishsong', 'protect', 'quiverdance', 'recover', 'reflect', 'reflecttype', 'rest', 'revivalblessing', 'roar', 'rockpolish', 'roost', 'shedtail', 'shellsmash', 'shiftgear', 'shoreup', 'silktrap', 'slackoff', 'sleeppowder', 'sleeptalk', 'softboiled', 'spikes', 'spikyshield', 'spore', 'stealthrock', 'stickyweb', 'strengthsap', 'substitute', 'switcheroo', 'swordsdance', 'synthesis', 'tailglow', 'tailwind', 'taunt', 'thunderwave', 'tidyup', 'toxic', 'transform', 'trick', 'victorydance', 'whirlwind', 'willowisp', 'wish', 'yawn',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly GOOD_WEAK_MOVES = [\r\n\t\t'accelerock', 'acrobatics', 'aquacutter', 'avalanche', 'barbbarrage', 'bonemerang', 'bouncybubble', 'bulletpunch', 'buzzybuzz', 'ceaselessedge', 'circlethrow', 'clearsmog', 'doubleironbash', 'dragondarts', 'dragontail', 'drainingkiss', 'endeavor', 'facade', 'firefang', 'flipturn', 'flowertrick', 'freezedry', 'frustration', 'geargrind', 'grassknot', 'gyroball', 'icefang', 'iceshard', 'iciclespear', 'infernalparade', 'knockoff', 'lastrespects', 'lowkick', 'machpunch', 'mortalspin', 'mysticalpower', 'naturesmadness', 'nightshade', 'nuzzle', 'pikapapow', 'populationbomb', 'psychocut', 'psyshieldbash', 'pursuit', 'quickattack', 'ragefist', 'rapidspin', 'return', 'rockblast', 'ruination', 'saltcure', 'scorchingsands', 'seismictoss', 'shadowclaw', 'shadowsneak', 'sizzlyslide', 'stoneaxe', 'storedpower', 'stormthrow', 'suckerpunch', 'superfang', 'surgingstrikes', 'tailslap', 'trailblaze', 'tripleaxel', 'tripledive', 'twinbeam', 'uturn', 'veeveevolley', 'voltswitch', 'watershuriken', 'weatherball',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly BAD_STRONG_MOVES = [\r\n\t\t'belch', 'burnup', 'crushclaw', 'dragonrush', 'dreameater', 'eggbomb', 'firepledge', 'flyingpress', 'grasspledge', 'hyperbeam', 'hyperfang', 'hyperspacehole', 'jawlock', 'landswrath', 'megakick', 'megapunch', 'mistyexplosion', 'muddywater', 'nightdaze', 'pollenpuff', 'rockclimb', 'selfdestruct', 'shelltrap', 'skyuppercut', 'slam', 'strength', 'submission', 'synchronoise', 'takedown', 'thrash', 'uproar', 'waterpledge',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly GOOD_DOUBLES_MOVES = [\r\n\t\t'allyswitch', 'bulldoze', 'coaching', 'electroweb', 'faketears', 'fling', 'followme', 'healpulse', 'helpinghand', 'junglehealing', 'lifedew', 'lunarblessing', 'muddywater', 'pollenpuff', 'psychup', 'ragepowder', 'safeguard', 'skillswap', 'snipeshot', 'wideguard',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly ALWAYS_GOOD_MOVES = [\r\n\t\t'blobbybop','boltbeam','checkem','comengo','dildocannon','focusmunch','gayagenda','hulkup','inverseroom','lickclean','meme','mop','punchout','quicksand','regenerate','scorchedearth','sleazyspores','slipturn','speedweed','spookout','sudoku','thinkfast','toke','trigger','weirdflex','wowweiner'\r\n\t] as ID[] as readonly ID[];\r\n\tgetBaseResults() {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst dex = this.dex;\r\n\t\tlet species = dex.species.get(this.species);\r\n\t\tconst format = this.format;\r\n\t\tconst isHackmons = (format.includes('hackmons') || format.endsWith('bh'));\r\n\t\tconst isSTABmons = (format.includes('stabmons') || format === 'staaabmons');\r\n\t\tconst isTradebacks = format.includes('tradebacks');\r\n\t\tconst regionBornLegality = dex.gen >= 6 &&\r\n\t\t\t/^battle(spot|stadium|festival)/.test(format) || format.startsWith('vgc') ||\r\n\t\t\t(dex.gen === 9 && (this.formatType !== 'natdex' && (!isModdedFormatType(this.formatType) || !this.formatType.isNatDex)));\r\n\r\n\t\tlet learnsetid = this.firstLearnsetid(species.id);\r\n\t\tlet moves: string[] = [];\r\n\t\tlet sketchMoves: string[] = [];\r\n\t\tlet sketch = false;\r\n\t\tlet gen = '' + dex.gen;\r\n\t\tlet lsetTable = BattleTeambuilderTable;\r\n\t\tif (this.formatType === 'bdsp' || this.formatType === 'bdspdoubles') lsetTable = lsetTable['gen8bdsp'];\r\n\t\tif (this.formatType === 'letsgo') lsetTable = lsetTable['gen7letsgo'];\r\n\t\tif (this.formatType === 'predlc') lsetTable = lsetTable['gen9predlc'];\r\n\t\tif (this.formatType === 'ssdlc1') lsetTable = lsetTable['gen8dlc1'];\r\n\t\tif (isModdedFormatType(this.formatType)) lsetTable = lsetTable[getModdedFormatTableName(this.formatType)];\r\n\t\twhile (learnsetid) {\r\n\t\t\tlet learnset = lsetTable.learnsets[learnsetid] || BattleTeambuilderTable.learnsets[learnsetid];\r\n\t\t\tif (this.formatType === 'letsgo') learnset = BattleTeambuilderTable['letsgo'].learnsets[learnsetid];\r\n\t\t\tif (typeof this.formatType === 'string' && this.formatType?.startsWith('dlc1')) learnset = BattleTeambuilderTable['gen8dlc1'].learnsets[learnsetid];\r\n\t\t\tif (learnset) {\r\n\t\t\t\tfor (let moveid in learnset) {\r\n\t\t\t\t\tlet learnsetEntry = learnset[moveid];\r\n\t\t\t\t\tconst move = dex.moves.get(moveid);\r\n\t\t\t\t\tconst minGenCode: {[gen: number]: string} = {6: 'p', 7: 'q', 8: 'g', 9: 'a'};\r\n\t\t\t\t\tif (regionBornLegality && !learnsetEntry.includes(minGenCode[dex.gen])) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t(this.formatType !== 'natdex' && (!isModdedFormatType(this.formatType) || !this.formatType.isNatDex)) &&\r\n\t\t\t\t\t\t!learnsetEntry.includes(gen) &&\r\n\t\t\t\t\t\t(!isTradebacks ? true : !(move.gen <= dex.gen && learnsetEntry.includes('' + (dex.gen + 1))))\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((this.formatType !== 'natdex' && (!isModdedFormatType(this.formatType) || !this.formatType.isNatDex)) && move.isNonstandard === \"Past\") {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tthis.formatType === 'ssdlc1' &&\r\n\t\t\t\t\t\tBattleTeambuilderTable['gen8dlc1']?.nonstandardMoves.includes(moveid)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t!isModdedFormatType(this.formatType) && this.formatType?.includes('predlc') && this.formatType !== 'predlcnatdex' &&\r\n\t\t\t\t\t\tBattleTeambuilderTable['gen9predlc']?.nonstandardMoves.includes(moveid)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.dex.gen >= 8 && this.dex.moves.get(moveid).isNonstandard === \"Past\" && (this.formatType !== 'natdex' && (!isModdedFormatType(this.formatType) || !this.formatType.isNatDex))) continue;\r\n\t\t\t\t\tif (moves.includes(moveid)) continue;\r\n\t\t\t\t\tmoves.push(moveid);\r\n\t\t\t\t\tif (moveid === 'sketch') sketch = true;\r\n\t\t\t\t\tif (moveid === 'hiddenpower') {\r\n\t\t\t\t\t\tmoves.push(\r\n\t\t\t\t\t\t\t'hiddenpowerbug', 'hiddenpowerdark', 'hiddenpowerdragon', 'hiddenpowerelectric', 'hiddenpowerfighting', 'hiddenpowerfire', 'hiddenpowerflying', 'hiddenpowerghost', 'hiddenpowergrass', 'hiddenpowerground', 'hiddenpowerice', 'hiddenpowerpoison', 'hiddenpowerpsychic', 'hiddenpowerrock', 'hiddenpowersteel', 'hiddenpowerwater'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, species.id);\r\n\t\t}\r\n\t\tif (sketch || isHackmons) {\r\n\t\t\tif (isHackmons) moves = [];\r\n\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\tif (!format.startsWith('cap') && (id === 'paleowave' || id === 'shadowstrike')) continue;\r\n\t\t\t\tconst move = dex.moves.get(id);\r\n\t\t\t\tif (move.gen > dex.gen) continue;\r\n\t\t\t\tif (sketch) {\r\n\t\t\t\t\tif (move.noSketch || move.isMax || move.isZ) continue;\r\n\t\t\t\t\tif (move.isNonstandard && move.isNonstandard !== 'Past') continue;\r\n\t\t\t\t\tif (move.isNonstandard === 'Past' && this.formatType !== 'natdex') continue;\r\n\t\t\t\t\tif (move.isMax || move.isZ || (move.isNonstandard && (move.isNonstandard !== 'Past' || (this.formatType !== 'natdex' || (isModdedFormatType(this.formatType) && !this.formatType.isNatDex)) && dex.gen === 8))) continue;\r\n\t\t\t\t\tsketchMoves.push(move.id);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!(dex.gen < 8 || this.formatType === 'natdex') && move.isZ) continue;\r\n\t\t\t\t\tif (typeof move.isMax === 'string') continue;\r\n\t\t\t\t\tif (move.isMax && dex.gen > 8) continue;\r\n\t\t\t\t\tif (move.isNonstandard === 'Past' && this.formatType !== 'natdex') continue;\r\n\t\t\t\t\tif (move.isNonstandard === 'LGPE' && this.formatType !== 'letsgo') continue;\r\n\t\t\t\t\tif (move.isNonstandard === 'Past' && (this.formatType !== 'natdex' && (isModdedFormatType(this.formatType) && !this.formatType.isNatDex)) && dex.gen === 8) continue;\r\n\t\t\t\t\tmoves.push(move.id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.formatType === 'metronome') moves = ['metronome'];\r\n\t\tif (isSTABmons) {\r\n\t\t\tfor (let id in this.getTable()) {\r\n\t\t\t\tconst move = dex.moves.get(id);\r\n\t\t\t\tif (moves.includes(move.id)) continue;\r\n\t\t\t\tif (move.gen > dex.gen) continue;\r\n\t\t\t\tif (move.isZ || move.isMax || (move.isNonstandard && move.isNonstandard !== 'Unobtainable')) continue;\r\n\r\n\t\t\t\tconst speciesTypes: string[] = [];\r\n\t\t\t\tconst moveTypes: string[] = [];\r\n\t\t\t\tfor (let i = dex.gen; i >= species.gen && i >= move.gen; i--) {\r\n\t\t\t\t\tconst genDex = Dex.forGen(i);\r\n\t\t\t\t\tmoveTypes.push(genDex.moves.get(move.name).type);\r\n\r\n\t\t\t\t\tconst pokemon = genDex.species.get(species.name);\r\n\t\t\t\t\tlet baseSpecies = genDex.species.get(pokemon.changesFrom || pokemon.name);\r\n\t\t\t\t\tif (!pokemon.battleOnly) speciesTypes.push(...pokemon.types);\r\n\t\t\t\t\tlet prevo = pokemon.prevo;\r\n\t\t\t\t\twhile (prevo) {\r\n\t\t\t\t\t\tconst prevoSpecies = genDex.species.get(prevo);\r\n\t\t\t\t\t\tspeciesTypes.push(...prevoSpecies.types);\r\n\t\t\t\t\t\tprevo = prevoSpecies.prevo;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (pokemon.battleOnly && typeof pokemon.battleOnly === 'string') {\r\n\t\t\t\t\t\tspecies = dex.species.get(pokemon.battleOnly);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst excludedForme = (s: Species) => [\r\n\t\t\t\t\t\t'Alola', 'Alola-Totem', 'Galar', 'Galar-Zen', 'Hisui', 'Paldea', 'Paldea-Combat', 'Paldea-Blaze', 'Paldea-Aqua',\r\n\t\t\t\t\t].includes(s.forme);\r\n\t\t\t\t\tif (baseSpecies.otherFormes && !['Wormadam', 'Urshifu'].includes(baseSpecies.baseSpecies)) {\r\n\t\t\t\t\t\tif (!excludedForme(species)) speciesTypes.push(...baseSpecies.types);\r\n\t\t\t\t\t\tfor (const formeName of baseSpecies.otherFormes) {\r\n\t\t\t\t\t\t\tconst forme = dex.species.get(formeName);\r\n\t\t\t\t\t\t\tif (!forme.battleOnly && !excludedForme(forme)) speciesTypes.push(...forme.types);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlet valid = false;\r\n\t\t\t\tfor (let type of moveTypes) {\r\n\t\t\t\t\tif (speciesTypes.includes(type)) {\r\n\t\t\t\t\t\tvalid = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (valid) moves.push(id);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmoves.sort();\r\n\t\tsketchMoves.sort();\r\n\r\n\t\tlet usableMoves: SearchRow[] = [];\r\n\t\tlet uselessMoves: SearchRow[] = [];\r\n\t\tfor (const id of moves) {\r\n\t\t\tconst isUsable = this.moveIsNotUseless(id as ID, species, moves, this.set);\r\n\t\t\tif (isUsable) {\r\n\t\t\t\tif (!usableMoves.length) usableMoves.push(['header', \"Moves\"]);\r\n\t\t\t\tusableMoves.push(['move', id as ID]);\r\n\t\t\t} else {\r\n\t\t\t\tif (!uselessMoves.length) uselessMoves.push(['header', \"Usually useless moves\"]);\r\n\t\t\t\tuselessMoves.push(['move', id as ID]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (sketchMoves.length) {\r\n\t\t\tusableMoves.push(['header', \"Sketched moves\"]);\r\n\t\t\tuselessMoves.push(['header', \"Useless sketched moves\"]);\r\n\t\t}\r\n\t\tfor (const id of sketchMoves) {\r\n\t\t\tconst isUsable = this.moveIsNotUseless(id as ID, species, sketchMoves, this.set);\r\n\t\t\tif (isUsable) {\r\n\t\t\t\tusableMoves.push(['move', id as ID]);\r\n\t\t\t} else {\r\n\t\t\t\tuselessMoves.push(['move', id as ID]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [...usableMoves, ...uselessMoves];\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'move') return true;\r\n\t\tconst move = this.dex.moves.get(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tif (move.type !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'category':\r\n\t\t\t\tif (move.category !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!this.canLearn(value as ID, move.id)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string, reverseSort?: boolean): SearchRow[] {\r\n\t\tconst sortOrder = reverseSort ? -1 : 1;\r\n\t\tswitch (sortCol) {\r\n\t\tcase 'power':\r\n\t\t\tlet powerTable: {[id: string]: number | undefined} = {\r\n\t\t\t\treturn: 102, frustration: 102, spitup: 300, trumpcard: 200, naturalgift: 80, grassknot: 120,\r\n\t\t\t\tlowkick: 120, gyroball: 150, electroball: 150, flail: 200, reversal: 200, present: 120,\r\n\t\t\t\twringout: 120, crushgrip: 120, heatcrash: 120, heavyslam: 120, fling: 130, magnitude: 150,\r\n\t\t\t\tbeatup: 24, punishment: 1020, psywave: 1250, nightshade: 1200, seismictoss: 1200,\r\n\t\t\t\tdragonrage: 1140, sonicboom: 1120, superfang: 1350, endeavor: 1399, sheercold: 1501,\r\n\t\t\t\tfissure: 1500, horndrill: 1500, guillotine: 1500,\r\n\t\t\t};\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet move1 = this.dex.moves.get(id1);\r\n\t\t\t\tlet move2 = this.dex.moves.get(id2);\r\n\t\t\t\tlet pow1 = move1.basePower || powerTable[id1] || (move1.category === 'Status' ? -1 : 1400);\r\n\t\t\t\tlet pow2 = move2.basePower || powerTable[id2] || (move2.category === 'Status' ? -1 : 1400);\r\n\t\t\t\treturn (pow2 - pow1) * sortOrder;\r\n\t\t\t});\r\n\t\tcase 'accuracy':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet accuracy1 = this.dex.moves.get(id1).accuracy || 0;\r\n\t\t\t\tlet accuracy2 = this.dex.moves.get(id2).accuracy || 0;\r\n\t\t\t\tif (accuracy1 === true) accuracy1 = 101;\r\n\t\t\t\tif (accuracy2 === true) accuracy2 = 101;\r\n\t\t\t\treturn (accuracy2 - accuracy1) * sortOrder;\r\n\t\t\t});\r\n\t\tcase 'pp':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet pp1 = this.dex.moves.get(id1).pp || 0;\r\n\t\t\t\tlet pp2 = this.dex.moves.get(id2).pp || 0;\r\n\t\t\t\treturn (pp2 - pp1) * sortOrder;\r\n\t\t\t});\r\n\t\tcase 'name':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst name1 = id1;\r\n\t\t\t\tconst name2 = id2;\r\n\t\t\t\treturn (name1 < name2 ? -1 : name1 > name2 ? 1 : 0) * sortOrder;\r\n\t\t\t});\r\n\t\t}\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleCategorySearch extends BattleTypedSearch<'category'> {\r\n\tgetTable() {\r\n\t\treturn {physical: 1, special: 1, status: 1};\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\treturn [\r\n\t\t\t['category', 'physical' as ID],\r\n\t\t\t['category', 'special' as ID],\r\n\t\t\t['category', 'status' as ID],\r\n\t\t];\r\n\t}\r\n\tgetBaseResults() {\r\n\t\treturn this.getDefaultResults();\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]): boolean {\r\n\t\tthrow new Error(\"invalid filter\");\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleTypeSearch extends BattleTypedSearch<'type'> {\r\n\tgetTable() {\r\n\t\treturn window.BattleTypeChart;\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tconst results: SearchRow[] = [];\r\n\t\tfor (let id in window.BattleTypeChart) {\r\n\t\t\tresults.push(['type', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults() {\r\n\t\treturn this.getDefaultResults();\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]): boolean {\r\n\t\tthrow new Error(\"invalid filter\");\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null, reverseSort?: boolean): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]}